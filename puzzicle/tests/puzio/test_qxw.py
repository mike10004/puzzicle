import io
from unittest import TestCase
from puzzicle.puzio import qxw
from puzzicle import tests
from puzzicle.puzio.qxw import AnswersExportCleaner
from puzzicle.puzio.qxw import Direction
from puzzicle.puzio.qxw import Entry
from puzzicle.puzio.qxw import print_entries
from puzzicle.puzio.qxw import QxwParser

class AnswersExportCleanerTest(TestCase):

    def test_clean_line(self):
        c = AnswersExportCleaner()
        for line, expected in [
            ("5 otter (5)", Entry(5, Direction.ACROSS, "OTTER")),
            ("10 Opal, opal (4)", Entry(10, Direction.DOWN, "OPAL")),
        ]:
            with self.subTest(line=line):
                actual = c.clean_line(line, expected.direction)
                self.assertEqual(expected, actual, f"from line {repr(line)}")

    def test_clean(self):
        text = """\
# file /home/jane/Documents/cruciverbalism/directions/answers.txt generated by Qxw 20140331: http://localhost:54343

Across

5 otter (5)
10 Opal, opal (4)
15 Paine (5)
16 DRNO (4)
17 WiFi (4)

Down

1 bawl (4)
2 Erie (4)
3 riff (4)
"""
        c = AnswersExportCleaner()
        entries = c.clean(text)
        self.assertListEqual([
            Entry(5, Direction.ACROSS, "OTTER"),
            Entry(10, Direction.ACROSS, "OPAL"),
            Entry(15, Direction.ACROSS, "PAINE"),
            Entry(16, Direction.ACROSS, "DRNO"),
            Entry(17, Direction.ACROSS, "WIFI"),
            Entry(1, Direction.DOWN, "BAWL"),
            Entry(2, Direction.DOWN, "ERIE"),
            Entry(3, Direction.DOWN, "RIFF"),
        ], entries)


class ModuleMethodsTest(TestCase):

    def test__acquire_lines_after(self):
        lines = """\
A
+b
+c
D
+e
+f
G
+h
+i
J
blob
K
L
+m
N
-o
G
+p
+q
""".split()
        with self.subTest("garden path"):
            result = qxw._acquire_lines_after(lines, lambda x: x == "D", lambda x: x.startswith("+"))
            result = list(result)
            self.assertListEqual(["+e", "+f"], result)
        with self.subTest("empty"):
            result = qxw._acquire_lines_after(lines, lambda x: x == "K", lambda x: x.startswith("+"))
            self.assertListEqual([], list(result))
        with self.subTest("repeat"):
            result = qxw._acquire_lines_after(lines, lambda x: x == "G", lambda x: x.startswith("+"))
            self.assertListEqual(["+h", "+i"], list(result))

    def test__print_entries(self):
        entries = [
            Entry(5, Direction.ACROSS, "OTTER"),
            Entry(10, Direction.ACROSS, "OPAL"),
            Entry(15, Direction.ACROSS, "PIPPILONGSTOCKING"),
            Entry(16, Direction.DOWN, "DONOHARM"),
            Entry(317, Direction.DOWN, "BAD"),
        ]
        buffer = io.StringIO()
        print_entries(entries, ofile=buffer)
        actual = buffer.getvalue()
        expected = """\
|   5A | OTTER             | 
|  10A | OPAL              | 
|  15A | PIPPILONGSTOCKING | 
|  16D | DONOHARM          | 
| 317D | BAD               | 
"""
        self.assertEqual(expected, actual)


class QxwParserTest(TestCase):

    def test_parse(self):
        text = tests.data.load_file('normal.qxw', 'r')
        model = QxwParser().parse(io.StringIO(text))
        solution = model.to_puz_solution()
        self.assertEqual('ABC...DEF.GH.IJ.KLM...NOP', solution, "converted solution")

    def test_parse_a1x1(self):
        with tests.data.open_file('a-1x1.qxw', 'r') as ifile:
            model = QxwParser().parse(ifile)
        solution = model.to_puz_solution()
        self.assertEqual('A', solution, "converted solution")

    def test_parse_blank1x1(self):
        with tests.data.open_file('blank-1x1.qxw', 'r') as ifile:
            model = QxwParser().parse(ifile)
        solution = model.to_puz_solution()
        self.assertEqual('_', solution, "converted solution")

    def test_parse_adark1x1(self):
        with tests.data.open_file('a-dark-1x1.qxw', 'r') as ifile:
            model = QxwParser().parse(ifile)
        solution = model.to_puz_solution()
        self.assertEqual('.', solution, "converted solution")

    def test_parse_basic2x2(self):
        text = tests.data.load_file('basic-2x2.qxw', 'r')
        model = QxwParser().parse(io.StringIO(text))
        solution = model.to_puz_solution()
        self.assertEqual('_.._', solution, "converted solution")

    def test_parse_letter_in_dark_2x2(self):
        with tests.data.open_file('letter-in-dark.qxw', 'r') as ifile:
            model = QxwParser().parse(ifile)
        sol = model.to_puz_solution()
        self.assertEqual('A..D', sol, "solution")

    def test_parse_mini5x4(self):
        with tests.data.open_file('mini-5x4.qxw', 'r') as ifile:
            q = QxwParser().parse(ifile)
        self.assertEqual('LAPS.IRATELAPEL.BAWL', q.to_puz_solution())
        self.assertEqual(5, q.width)
        self.assertEqual(4, q.height)
        self.assertEqual("Foo", q.title)
        self.assertEqual("Bar", q.author)
